// Code generated by protoc-gen-gogo.
// source: v1/scheduler/scheduler.proto
// DO NOT EDIT!

/*
Package mesos_v1_scheduler is a generated protocol buffer package.

It is generated from these files:
	v1/scheduler/scheduler.proto

It has these top-level messages:
	Event
	Call
*/
package mesos_v1_scheduler

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import mesos_v1 "mesos/v1"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Possible event types, followed by message definitions if
// applicable.
type Event_Type int32

const (
	// This must be the first enum value in this list, to
	// ensure that if 'type' is not set, the default value
	// is UNKNOWN. This enables enum values to be added
	// in a backwards-compatible way. See: MESOS-4997.
	Event_UNKNOWN               Event_Type = 0
	Event_SUBSCRIBED            Event_Type = 1
	Event_OFFERS                Event_Type = 2
	Event_INVERSE_OFFERS        Event_Type = 9
	Event_RESCIND               Event_Type = 3
	Event_RESCIND_INVERSE_OFFER Event_Type = 10
	Event_UPDATE                Event_Type = 4
	Event_MESSAGE               Event_Type = 5
	Event_FAILURE               Event_Type = 6
	Event_ERROR                 Event_Type = 7
	// Periodic message sent by the Mesos master according to
	// 'Subscribed.heartbeat_interval_seconds'. If the scheduler does
	// not receive any events (including heartbeats) for an extended
	// period of time (e.g., 5 x heartbeat_interval_seconds), there is
	// likely a network partition. In such a case the scheduler should
	// close the existing subscription connection and resubscribe
	// using a backoff strategy.
	Event_HEARTBEAT Event_Type = 8
)

var Event_Type_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "SUBSCRIBED",
	2:  "OFFERS",
	9:  "INVERSE_OFFERS",
	3:  "RESCIND",
	10: "RESCIND_INVERSE_OFFER",
	4:  "UPDATE",
	5:  "MESSAGE",
	6:  "FAILURE",
	7:  "ERROR",
	8:  "HEARTBEAT",
}
var Event_Type_value = map[string]int32{
	"UNKNOWN":               0,
	"SUBSCRIBED":            1,
	"OFFERS":                2,
	"INVERSE_OFFERS":        9,
	"RESCIND":               3,
	"RESCIND_INVERSE_OFFER": 10,
	"UPDATE":                4,
	"MESSAGE":               5,
	"FAILURE":               6,
	"ERROR":                 7,
	"HEARTBEAT":             8,
}

func (x Event_Type) Enum() *Event_Type {
	p := new(Event_Type)
	*p = x
	return p
}
func (x Event_Type) String() string {
	return proto.EnumName(Event_Type_name, int32(x))
}
func (x *Event_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_Type_value, data, "Event_Type")
	if err != nil {
		return err
	}
	*x = Event_Type(value)
	return nil
}
func (Event_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{0, 0} }

// Possible call types, followed by message definitions if
// applicable.
type Call_Type int32

const (
	// See comments above on `Event::Type` for more details on this enum value.
	Call_UNKNOWN                Call_Type = 0
	Call_SUBSCRIBE              Call_Type = 1
	Call_TEARDOWN               Call_Type = 2
	Call_ACCEPT                 Call_Type = 3
	Call_DECLINE                Call_Type = 4
	Call_ACCEPT_INVERSE_OFFERS  Call_Type = 13
	Call_DECLINE_INVERSE_OFFERS Call_Type = 14
	Call_REVIVE                 Call_Type = 5
	Call_KILL                   Call_Type = 6
	Call_SHUTDOWN               Call_Type = 7
	Call_ACKNOWLEDGE            Call_Type = 8
	Call_RECONCILE              Call_Type = 9
	Call_MESSAGE                Call_Type = 10
	Call_REQUEST                Call_Type = 11
	Call_SUPPRESS               Call_Type = 12
)

var Call_Type_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "SUBSCRIBE",
	2:  "TEARDOWN",
	3:  "ACCEPT",
	4:  "DECLINE",
	13: "ACCEPT_INVERSE_OFFERS",
	14: "DECLINE_INVERSE_OFFERS",
	5:  "REVIVE",
	6:  "KILL",
	7:  "SHUTDOWN",
	8:  "ACKNOWLEDGE",
	9:  "RECONCILE",
	10: "MESSAGE",
	11: "REQUEST",
	12: "SUPPRESS",
}
var Call_Type_value = map[string]int32{
	"UNKNOWN":                0,
	"SUBSCRIBE":              1,
	"TEARDOWN":               2,
	"ACCEPT":                 3,
	"DECLINE":                4,
	"ACCEPT_INVERSE_OFFERS":  13,
	"DECLINE_INVERSE_OFFERS": 14,
	"REVIVE":                 5,
	"KILL":                   6,
	"SHUTDOWN":               7,
	"ACKNOWLEDGE":            8,
	"RECONCILE":              9,
	"MESSAGE":                10,
	"REQUEST":                11,
	"SUPPRESS":               12,
}

func (x Call_Type) Enum() *Call_Type {
	p := new(Call_Type)
	*p = x
	return p
}
func (x Call_Type) String() string {
	return proto.EnumName(Call_Type_name, int32(x))
}
func (x *Call_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Call_Type_value, data, "Call_Type")
	if err != nil {
		return err
	}
	*x = Call_Type(value)
	return nil
}
func (Call_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1, 0} }

// *
// Scheduler event API.
//
// An event is described using the standard protocol buffer "union"
// trick, see:
// https://developers.google.com/protocol-buffers/docs/techniques#union.
type Event struct {
	// Type of the event, indicates which optional field below should be
	// present if that type has a nested message definition.
	// Enum fields should be optional, see: MESOS-4997.
	Type                *Event_Type                `protobuf:"varint,1,opt,name=type,enum=mesos.v1.scheduler.Event_Type" json:"type,omitempty"`
	Subscribed          *Event_Subscribed          `protobuf:"bytes,2,opt,name=subscribed" json:"subscribed,omitempty"`
	Offers              *Event_Offers              `protobuf:"bytes,3,opt,name=offers" json:"offers,omitempty"`
	InverseOffers       *Event_InverseOffers       `protobuf:"bytes,9,opt,name=inverse_offers,json=inverseOffers" json:"inverse_offers,omitempty"`
	Rescind             *Event_Rescind             `protobuf:"bytes,4,opt,name=rescind" json:"rescind,omitempty"`
	RescindInverseOffer *Event_RescindInverseOffer `protobuf:"bytes,10,opt,name=rescind_inverse_offer,json=rescindInverseOffer" json:"rescind_inverse_offer,omitempty"`
	Update              *Event_Update              `protobuf:"bytes,5,opt,name=update" json:"update,omitempty"`
	Message             *Event_Message             `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	Failure             *Event_Failure             `protobuf:"bytes,7,opt,name=failure" json:"failure,omitempty"`
	Error               *Event_Error               `protobuf:"bytes,8,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized    []byte                     `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{0} }

func (m *Event) GetType() Event_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Event_UNKNOWN
}

func (m *Event) GetSubscribed() *Event_Subscribed {
	if m != nil {
		return m.Subscribed
	}
	return nil
}

func (m *Event) GetOffers() *Event_Offers {
	if m != nil {
		return m.Offers
	}
	return nil
}

func (m *Event) GetInverseOffers() *Event_InverseOffers {
	if m != nil {
		return m.InverseOffers
	}
	return nil
}

func (m *Event) GetRescind() *Event_Rescind {
	if m != nil {
		return m.Rescind
	}
	return nil
}

func (m *Event) GetRescindInverseOffer() *Event_RescindInverseOffer {
	if m != nil {
		return m.RescindInverseOffer
	}
	return nil
}

func (m *Event) GetUpdate() *Event_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *Event) GetMessage() *Event_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Event) GetFailure() *Event_Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *Event) GetError() *Event_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// First event received when the scheduler subscribes.
type Event_Subscribed struct {
	FrameworkId *mesos_v1.FrameworkID `protobuf:"bytes,1,req,name=framework_id,json=frameworkId" json:"framework_id,omitempty"`
	// This value will be set if the master is sending heartbeats. See
	// the comment above on 'HEARTBEAT' for more details.
	HeartbeatIntervalSeconds *float64 `protobuf:"fixed64,2,opt,name=heartbeat_interval_seconds,json=heartbeatIntervalSeconds" json:"heartbeat_interval_seconds,omitempty"`
	// Since Mesos 1.1.
	MasterInfo       *mesos_v1.MasterInfo `protobuf:"bytes,3,opt,name=master_info,json=masterInfo" json:"master_info,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Event_Subscribed) Reset()                    { *m = Event_Subscribed{} }
func (m *Event_Subscribed) String() string            { return proto.CompactTextString(m) }
func (*Event_Subscribed) ProtoMessage()               {}
func (*Event_Subscribed) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{0, 0} }

func (m *Event_Subscribed) GetFrameworkId() *mesos_v1.FrameworkID {
	if m != nil {
		return m.FrameworkId
	}
	return nil
}

func (m *Event_Subscribed) GetHeartbeatIntervalSeconds() float64 {
	if m != nil && m.HeartbeatIntervalSeconds != nil {
		return *m.HeartbeatIntervalSeconds
	}
	return 0
}

func (m *Event_Subscribed) GetMasterInfo() *mesos_v1.MasterInfo {
	if m != nil {
		return m.MasterInfo
	}
	return nil
}

// Received whenever there are new resources that are offered to the
// scheduler. Each offer corresponds to a set of resources on an
// agent. Until the scheduler accepts or declines an offer the
// resources are considered allocated to the scheduler.
type Event_Offers struct {
	Offers           []*mesos_v1.Offer `protobuf:"bytes,1,rep,name=offers" json:"offers,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Event_Offers) Reset()                    { *m = Event_Offers{} }
func (m *Event_Offers) String() string            { return proto.CompactTextString(m) }
func (*Event_Offers) ProtoMessage()               {}
func (*Event_Offers) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{0, 1} }

func (m *Event_Offers) GetOffers() []*mesos_v1.Offer {
	if m != nil {
		return m.Offers
	}
	return nil
}

// Received whenever there are resources requested back from the
// scheduler. Each inverse offer specifies the agent, and
// optionally specific resources. Accepting or Declining an inverse
// offer informs the allocator of the scheduler's ability to release
// the specified resources without violating an SLA. If no resources
// are specified then all resources on the agent are requested to be
// released.
type Event_InverseOffers struct {
	InverseOffers    []*mesos_v1.InverseOffer `protobuf:"bytes,1,rep,name=inverse_offers,json=inverseOffers" json:"inverse_offers,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *Event_InverseOffers) Reset()                    { *m = Event_InverseOffers{} }
func (m *Event_InverseOffers) String() string            { return proto.CompactTextString(m) }
func (*Event_InverseOffers) ProtoMessage()               {}
func (*Event_InverseOffers) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{0, 2} }

func (m *Event_InverseOffers) GetInverseOffers() []*mesos_v1.InverseOffer {
	if m != nil {
		return m.InverseOffers
	}
	return nil
}

// Received when a particular offer is no longer valid (e.g., the
// agent corresponding to the offer has been removed) and hence
// needs to be rescinded. Any future calls ('Accept' / 'Decline') made
// by the scheduler regarding this offer will be invalid.
type Event_Rescind struct {
	OfferId          *mesos_v1.OfferID `protobuf:"bytes,1,req,name=offer_id,json=offerId" json:"offer_id,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Event_Rescind) Reset()                    { *m = Event_Rescind{} }
func (m *Event_Rescind) String() string            { return proto.CompactTextString(m) }
func (*Event_Rescind) ProtoMessage()               {}
func (*Event_Rescind) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{0, 3} }

func (m *Event_Rescind) GetOfferId() *mesos_v1.OfferID {
	if m != nil {
		return m.OfferId
	}
	return nil
}

// Received when a particular inverse offer is no longer valid
// (e.g., the agent corresponding to the offer has been removed)
// and hence needs to be rescinded. Any future calls ('Accept' /
// 'Decline') made by the scheduler regarding this inverse offer
// will be invalid.
type Event_RescindInverseOffer struct {
	InverseOfferId   *mesos_v1.OfferID `protobuf:"bytes,1,req,name=inverse_offer_id,json=inverseOfferId" json:"inverse_offer_id,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Event_RescindInverseOffer) Reset()         { *m = Event_RescindInverseOffer{} }
func (m *Event_RescindInverseOffer) String() string { return proto.CompactTextString(m) }
func (*Event_RescindInverseOffer) ProtoMessage()    {}
func (*Event_RescindInverseOffer) Descriptor() ([]byte, []int) {
	return fileDescriptorScheduler, []int{0, 4}
}

func (m *Event_RescindInverseOffer) GetInverseOfferId() *mesos_v1.OfferID {
	if m != nil {
		return m.InverseOfferId
	}
	return nil
}

// Received whenever there is a status update that is generated by
// the executor or agent or master. Status updates should be used by
// executors to reliably communicate the status of the tasks that
// they manage. It is crucial that a terminal update (see TaskState
// in v1/mesos.proto) is sent by the executor as soon as the task
// terminates, in order for Mesos to release the resources allocated
// to the task. It is also the responsibility of the scheduler to
// explicitly acknowledge the receipt of a status update. See
// 'Acknowledge' in the 'Call' section below for the semantics.
//
// A task status update may be used for guaranteed delivery of some
// task-related information, e.g., task's health update. Such
// information may be shadowed by subsequent task status updates, that
// do not preserve fields of the previously sent message.
type Event_Update struct {
	Status           *mesos_v1.TaskStatus `protobuf:"bytes,1,req,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Event_Update) Reset()                    { *m = Event_Update{} }
func (m *Event_Update) String() string            { return proto.CompactTextString(m) }
func (*Event_Update) ProtoMessage()               {}
func (*Event_Update) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{0, 5} }

func (m *Event_Update) GetStatus() *mesos_v1.TaskStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Received when a custom message generated by the executor is
// forwarded by the master. Note that this message is not
// interpreted by Mesos and is only forwarded (without reliability
// guarantees) to the scheduler. It is up to the executor to retry
// if the message is dropped for any reason.
type Event_Message struct {
	AgentId          *mesos_v1.AgentID    `protobuf:"bytes,1,req,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	ExecutorId       *mesos_v1.ExecutorID `protobuf:"bytes,2,req,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	Data             []byte               `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Event_Message) Reset()                    { *m = Event_Message{} }
func (m *Event_Message) String() string            { return proto.CompactTextString(m) }
func (*Event_Message) ProtoMessage()               {}
func (*Event_Message) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{0, 6} }

func (m *Event_Message) GetAgentId() *mesos_v1.AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *Event_Message) GetExecutorId() *mesos_v1.ExecutorID {
	if m != nil {
		return m.ExecutorId
	}
	return nil
}

func (m *Event_Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Received when an agent is removed from the cluster (e.g., failed
// health checks) or when an executor is terminated. Note that, this
// event coincides with receipt of terminal UPDATE events for any
// active tasks belonging to the agent or executor and receipt of
// 'Rescind' events for any outstanding offers belonging to the
// agent. Note that there is no guaranteed order between the
// 'Failure', 'Update' and 'Rescind' events when an agent or executor
// is removed.
// TODO(vinod): Consider splitting the lost agent and terminated
// executor into separate events and ensure it's reliably generated.
type Event_Failure struct {
	AgentId *mesos_v1.AgentID `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	// If this was just a failure of an executor on an agent then
	// 'executor_id' will be set and possibly 'status' (if we were
	// able to determine the exit status).
	ExecutorId *mesos_v1.ExecutorID `protobuf:"bytes,2,opt,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	// On Posix, `status` corresponds to termination information in the
	// `stat_loc` area returned from a `waitpid` call. On Windows, `status`
	// is obtained via calling the `GetExitCodeProcess()` function. For
	// messages coming from Posix agents, schedulers need to apply
	// `WEXITSTATUS` family macros or equivalent transformations to obtain
	// exit codes.
	//
	// TODO(alexr): Consider unifying Windows and Posix behavior by returning
	// exit code here, see MESOS-7241.
	Status           *int32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Event_Failure) Reset()                    { *m = Event_Failure{} }
func (m *Event_Failure) String() string            { return proto.CompactTextString(m) }
func (*Event_Failure) ProtoMessage()               {}
func (*Event_Failure) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{0, 7} }

func (m *Event_Failure) GetAgentId() *mesos_v1.AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *Event_Failure) GetExecutorId() *mesos_v1.ExecutorID {
	if m != nil {
		return m.ExecutorId
	}
	return nil
}

func (m *Event_Failure) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

// Received when there is an unrecoverable error in the scheduler (e.g.,
// scheduler failed over, rate limiting, authorization errors etc.). The
// scheduler should abort on receiving this event.
type Event_Error struct {
	Message          *string `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Event_Error) Reset()                    { *m = Event_Error{} }
func (m *Event_Error) String() string            { return proto.CompactTextString(m) }
func (*Event_Error) ProtoMessage()               {}
func (*Event_Error) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{0, 8} }

func (m *Event_Error) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// *
// Scheduler call API.
//
// Like Event, a Call is described using the standard protocol buffer
// "union" trick (see above).
type Call struct {
	// Identifies who generated this call. Master assigns a framework id
	// when a new scheduler subscribes for the first time. Once assigned,
	// the scheduler must set the 'framework_id' here and within its
	// FrameworkInfo (in any further 'Subscribe' calls). This allows the
	// master to identify a scheduler correctly across disconnections,
	// failovers, etc.
	FrameworkId *mesos_v1.FrameworkID `protobuf:"bytes,1,opt,name=framework_id,json=frameworkId" json:"framework_id,omitempty"`
	// Type of the call, indicates which optional field below should be
	// present if that type has a nested message definition.
	// See comments on `Event::Type` above on the reasoning behind this field being optional.
	Type                 *Call_Type                 `protobuf:"varint,2,opt,name=type,enum=mesos.v1.scheduler.Call_Type" json:"type,omitempty"`
	Subscribe            *Call_Subscribe            `protobuf:"bytes,3,opt,name=subscribe" json:"subscribe,omitempty"`
	Accept               *Call_Accept               `protobuf:"bytes,4,opt,name=accept" json:"accept,omitempty"`
	Decline              *Call_Decline              `protobuf:"bytes,5,opt,name=decline" json:"decline,omitempty"`
	AcceptInverseOffers  *Call_AcceptInverseOffers  `protobuf:"bytes,13,opt,name=accept_inverse_offers,json=acceptInverseOffers" json:"accept_inverse_offers,omitempty"`
	DeclineInverseOffers *Call_DeclineInverseOffers `protobuf:"bytes,14,opt,name=decline_inverse_offers,json=declineInverseOffers" json:"decline_inverse_offers,omitempty"`
	Revive               *Call_Revive               `protobuf:"bytes,15,opt,name=revive" json:"revive,omitempty"`
	Kill                 *Call_Kill                 `protobuf:"bytes,6,opt,name=kill" json:"kill,omitempty"`
	Shutdown             *Call_Shutdown             `protobuf:"bytes,7,opt,name=shutdown" json:"shutdown,omitempty"`
	Acknowledge          *Call_Acknowledge          `protobuf:"bytes,8,opt,name=acknowledge" json:"acknowledge,omitempty"`
	Reconcile            *Call_Reconcile            `protobuf:"bytes,9,opt,name=reconcile" json:"reconcile,omitempty"`
	Message              *Call_Message              `protobuf:"bytes,10,opt,name=message" json:"message,omitempty"`
	Request              *Call_Request              `protobuf:"bytes,11,opt,name=request" json:"request,omitempty"`
	Suppress             *Call_Suppress             `protobuf:"bytes,16,opt,name=suppress" json:"suppress,omitempty"`
	XXX_unrecognized     []byte                     `json:"-"`
}

func (m *Call) Reset()                    { *m = Call{} }
func (m *Call) String() string            { return proto.CompactTextString(m) }
func (*Call) ProtoMessage()               {}
func (*Call) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1} }

func (m *Call) GetFrameworkId() *mesos_v1.FrameworkID {
	if m != nil {
		return m.FrameworkId
	}
	return nil
}

func (m *Call) GetType() Call_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Call_UNKNOWN
}

func (m *Call) GetSubscribe() *Call_Subscribe {
	if m != nil {
		return m.Subscribe
	}
	return nil
}

func (m *Call) GetAccept() *Call_Accept {
	if m != nil {
		return m.Accept
	}
	return nil
}

func (m *Call) GetDecline() *Call_Decline {
	if m != nil {
		return m.Decline
	}
	return nil
}

func (m *Call) GetAcceptInverseOffers() *Call_AcceptInverseOffers {
	if m != nil {
		return m.AcceptInverseOffers
	}
	return nil
}

func (m *Call) GetDeclineInverseOffers() *Call_DeclineInverseOffers {
	if m != nil {
		return m.DeclineInverseOffers
	}
	return nil
}

func (m *Call) GetRevive() *Call_Revive {
	if m != nil {
		return m.Revive
	}
	return nil
}

func (m *Call) GetKill() *Call_Kill {
	if m != nil {
		return m.Kill
	}
	return nil
}

func (m *Call) GetShutdown() *Call_Shutdown {
	if m != nil {
		return m.Shutdown
	}
	return nil
}

func (m *Call) GetAcknowledge() *Call_Acknowledge {
	if m != nil {
		return m.Acknowledge
	}
	return nil
}

func (m *Call) GetReconcile() *Call_Reconcile {
	if m != nil {
		return m.Reconcile
	}
	return nil
}

func (m *Call) GetMessage() *Call_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Call) GetRequest() *Call_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Call) GetSuppress() *Call_Suppress {
	if m != nil {
		return m.Suppress
	}
	return nil
}

// Subscribes the scheduler with the master to receive events. A
// scheduler must send other calls only after it has received the
// SUBCRIBED event.
type Call_Subscribe struct {
	// See the comments below on 'framework_id' on the semantics for
	// 'framework_info.id'.
	FrameworkInfo    *mesos_v1.FrameworkInfo `protobuf:"bytes,1,req,name=framework_info,json=frameworkInfo" json:"framework_info,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *Call_Subscribe) Reset()                    { *m = Call_Subscribe{} }
func (m *Call_Subscribe) String() string            { return proto.CompactTextString(m) }
func (*Call_Subscribe) ProtoMessage()               {}
func (*Call_Subscribe) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1, 0} }

func (m *Call_Subscribe) GetFrameworkInfo() *mesos_v1.FrameworkInfo {
	if m != nil {
		return m.FrameworkInfo
	}
	return nil
}

// Accepts an offer, performing the specified operations
// in a sequential manner.
//
// E.g. Launch a task with a newly reserved persistent volume:
//
//   Accept {
//     offer_ids: [ ... ]
//     operations: [
//       { type: RESERVE,
//         reserve: { resources: [ disk(role):2 ] } }
//       { type: CREATE,
//         create: { volumes: [ disk(role):1+persistence ] } }
//       { type: LAUNCH,
//         launch: { task_infos ... disk(role):1;disk(role):1+persistence } }
//     ]
//   }
//
// Note that any of the offer’s resources not used in the 'Accept'
// call (e.g., to launch a task) are considered unused and might be
// reoffered to other frameworks. In other words, the same OfferID
// cannot be used in more than one 'Accept' call.
type Call_Accept struct {
	OfferIds         []*mesos_v1.OfferID         `protobuf:"bytes,1,rep,name=offer_ids,json=offerIds" json:"offer_ids,omitempty"`
	Operations       []*mesos_v1.Offer_Operation `protobuf:"bytes,2,rep,name=operations" json:"operations,omitempty"`
	Filters          *mesos_v1.Filters           `protobuf:"bytes,3,opt,name=filters" json:"filters,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *Call_Accept) Reset()                    { *m = Call_Accept{} }
func (m *Call_Accept) String() string            { return proto.CompactTextString(m) }
func (*Call_Accept) ProtoMessage()               {}
func (*Call_Accept) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1, 1} }

func (m *Call_Accept) GetOfferIds() []*mesos_v1.OfferID {
	if m != nil {
		return m.OfferIds
	}
	return nil
}

func (m *Call_Accept) GetOperations() []*mesos_v1.Offer_Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *Call_Accept) GetFilters() *mesos_v1.Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

// Declines an offer, signaling the master to potentially reoffer
// the resources to a different framework. Note that this is same
// as sending an Accept call with no operations. See comments on
// top of 'Accept' for semantics.
type Call_Decline struct {
	OfferIds         []*mesos_v1.OfferID `protobuf:"bytes,1,rep,name=offer_ids,json=offerIds" json:"offer_ids,omitempty"`
	Filters          *mesos_v1.Filters   `protobuf:"bytes,2,opt,name=filters" json:"filters,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Call_Decline) Reset()                    { *m = Call_Decline{} }
func (m *Call_Decline) String() string            { return proto.CompactTextString(m) }
func (*Call_Decline) ProtoMessage()               {}
func (*Call_Decline) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1, 2} }

func (m *Call_Decline) GetOfferIds() []*mesos_v1.OfferID {
	if m != nil {
		return m.OfferIds
	}
	return nil
}

func (m *Call_Decline) GetFilters() *mesos_v1.Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

// Accepts an inverse offer. Inverse offers should only be accepted
// if the resources in the offer can be safely evacuated before the
// provided unavailability.
type Call_AcceptInverseOffers struct {
	InverseOfferIds  []*mesos_v1.OfferID `protobuf:"bytes,1,rep,name=inverse_offer_ids,json=inverseOfferIds" json:"inverse_offer_ids,omitempty"`
	Filters          *mesos_v1.Filters   `protobuf:"bytes,2,opt,name=filters" json:"filters,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Call_AcceptInverseOffers) Reset()         { *m = Call_AcceptInverseOffers{} }
func (m *Call_AcceptInverseOffers) String() string { return proto.CompactTextString(m) }
func (*Call_AcceptInverseOffers) ProtoMessage()    {}
func (*Call_AcceptInverseOffers) Descriptor() ([]byte, []int) {
	return fileDescriptorScheduler, []int{1, 3}
}

func (m *Call_AcceptInverseOffers) GetInverseOfferIds() []*mesos_v1.OfferID {
	if m != nil {
		return m.InverseOfferIds
	}
	return nil
}

func (m *Call_AcceptInverseOffers) GetFilters() *mesos_v1.Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

// Declines an inverse offer. Inverse offers should be declined if
// the resources in the offer might not be safely evacuated before
// the provided unavailability.
type Call_DeclineInverseOffers struct {
	InverseOfferIds  []*mesos_v1.OfferID `protobuf:"bytes,1,rep,name=inverse_offer_ids,json=inverseOfferIds" json:"inverse_offer_ids,omitempty"`
	Filters          *mesos_v1.Filters   `protobuf:"bytes,2,opt,name=filters" json:"filters,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Call_DeclineInverseOffers) Reset()         { *m = Call_DeclineInverseOffers{} }
func (m *Call_DeclineInverseOffers) String() string { return proto.CompactTextString(m) }
func (*Call_DeclineInverseOffers) ProtoMessage()    {}
func (*Call_DeclineInverseOffers) Descriptor() ([]byte, []int) {
	return fileDescriptorScheduler, []int{1, 4}
}

func (m *Call_DeclineInverseOffers) GetInverseOfferIds() []*mesos_v1.OfferID {
	if m != nil {
		return m.InverseOfferIds
	}
	return nil
}

func (m *Call_DeclineInverseOffers) GetFilters() *mesos_v1.Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

// Revive offers for a specified role. If role is unset, the
// `REVIVE` call will revive offers for all of the roles the
// framework is subscribed to.
type Call_Revive struct {
	Role             *string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Call_Revive) Reset()                    { *m = Call_Revive{} }
func (m *Call_Revive) String() string            { return proto.CompactTextString(m) }
func (*Call_Revive) ProtoMessage()               {}
func (*Call_Revive) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1, 5} }

func (m *Call_Revive) GetRole() string {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return ""
}

// Kills a specific task. If the scheduler has a custom executor,
// the kill is forwarded to the executor and it is up to the
// executor to kill the task and send a TASK_KILLED (or TASK_FAILED)
// update. Note that Mesos releases the resources for a task once it
// receives a terminal update (See TaskState in v1/mesos.proto) for
// it. If the task is unknown to the master, a TASK_LOST update is
// generated.
//
// If a task within a task group is killed before the group is
// delivered to the executor, all tasks in the task group are
// killed. When a task group has been delivered to the executor,
// it is up to the executor to decide how to deal with the kill.
// Note The default Mesos executor will currently kill all the
// tasks in the task group if it gets a kill for any task.
type Call_Kill struct {
	TaskId  *mesos_v1.TaskID  `protobuf:"bytes,1,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	AgentId *mesos_v1.AgentID `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	// If set, overrides any previously specified kill policy for this task.
	// This includes 'TaskInfo.kill_policy' and 'Executor.kill.kill_policy'.
	// Can be used to forcefully kill a task which is already being killed.
	KillPolicy       *mesos_v1.KillPolicy `protobuf:"bytes,3,opt,name=kill_policy,json=killPolicy" json:"kill_policy,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Call_Kill) Reset()                    { *m = Call_Kill{} }
func (m *Call_Kill) String() string            { return proto.CompactTextString(m) }
func (*Call_Kill) ProtoMessage()               {}
func (*Call_Kill) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1, 6} }

func (m *Call_Kill) GetTaskId() *mesos_v1.TaskID {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *Call_Kill) GetAgentId() *mesos_v1.AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *Call_Kill) GetKillPolicy() *mesos_v1.KillPolicy {
	if m != nil {
		return m.KillPolicy
	}
	return nil
}

// Shuts down a custom executor. When the executor gets a shutdown
// event, it is expected to kill all its tasks (and send TASK_KILLED
// updates) and terminate. If the executor doesn’t terminate within
// a certain timeout (configurable via
// '--executor_shutdown_grace_period' agent flag), the agent will
// forcefully destroy the container (executor and its tasks) and
// transition its active tasks to TASK_LOST.
type Call_Shutdown struct {
	ExecutorId       *mesos_v1.ExecutorID `protobuf:"bytes,1,req,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	AgentId          *mesos_v1.AgentID    `protobuf:"bytes,2,req,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Call_Shutdown) Reset()                    { *m = Call_Shutdown{} }
func (m *Call_Shutdown) String() string            { return proto.CompactTextString(m) }
func (*Call_Shutdown) ProtoMessage()               {}
func (*Call_Shutdown) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1, 7} }

func (m *Call_Shutdown) GetExecutorId() *mesos_v1.ExecutorID {
	if m != nil {
		return m.ExecutorId
	}
	return nil
}

func (m *Call_Shutdown) GetAgentId() *mesos_v1.AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

// Acknowledges the receipt of status update. Schedulers are
// responsible for explicitly acknowledging the receipt of status
// updates that have 'Update.status().uuid()' field set. Such status
// updates are retried by the agent until they are acknowledged by
// the scheduler.
type Call_Acknowledge struct {
	AgentId          *mesos_v1.AgentID `protobuf:"bytes,1,req,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	TaskId           *mesos_v1.TaskID  `protobuf:"bytes,2,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	Uuid             []byte            `protobuf:"bytes,3,req,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Call_Acknowledge) Reset()                    { *m = Call_Acknowledge{} }
func (m *Call_Acknowledge) String() string            { return proto.CompactTextString(m) }
func (*Call_Acknowledge) ProtoMessage()               {}
func (*Call_Acknowledge) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1, 8} }

func (m *Call_Acknowledge) GetAgentId() *mesos_v1.AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *Call_Acknowledge) GetTaskId() *mesos_v1.TaskID {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *Call_Acknowledge) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

// Allows the scheduler to query the status for non-terminal tasks.
// This causes the master to send back the latest task status for
// each task in 'tasks', if possible. Tasks that are no longer known
// will result in a TASK_LOST, TASK_UNKNOWN, or TASK_UNREACHABLE update.
// If 'tasks' is empty, then the master will send the latest status
// for each task currently known.
type Call_Reconcile struct {
	Tasks            []*Call_Reconcile_Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *Call_Reconcile) Reset()                    { *m = Call_Reconcile{} }
func (m *Call_Reconcile) String() string            { return proto.CompactTextString(m) }
func (*Call_Reconcile) ProtoMessage()               {}
func (*Call_Reconcile) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1, 9} }

func (m *Call_Reconcile) GetTasks() []*Call_Reconcile_Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// TODO(vinod): Support arbitrary queries than just state of tasks.
type Call_Reconcile_Task struct {
	TaskId           *mesos_v1.TaskID  `protobuf:"bytes,1,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	AgentId          *mesos_v1.AgentID `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Call_Reconcile_Task) Reset()         { *m = Call_Reconcile_Task{} }
func (m *Call_Reconcile_Task) String() string { return proto.CompactTextString(m) }
func (*Call_Reconcile_Task) ProtoMessage()    {}
func (*Call_Reconcile_Task) Descriptor() ([]byte, []int) {
	return fileDescriptorScheduler, []int{1, 9, 0}
}

func (m *Call_Reconcile_Task) GetTaskId() *mesos_v1.TaskID {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *Call_Reconcile_Task) GetAgentId() *mesos_v1.AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

// Sends arbitrary binary data to the executor. Note that Mesos
// neither interprets this data nor makes any guarantees about the
// delivery of this message to the executor.
type Call_Message struct {
	AgentId          *mesos_v1.AgentID    `protobuf:"bytes,1,req,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	ExecutorId       *mesos_v1.ExecutorID `protobuf:"bytes,2,req,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	Data             []byte               `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Call_Message) Reset()                    { *m = Call_Message{} }
func (m *Call_Message) String() string            { return proto.CompactTextString(m) }
func (*Call_Message) ProtoMessage()               {}
func (*Call_Message) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1, 10} }

func (m *Call_Message) GetAgentId() *mesos_v1.AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *Call_Message) GetExecutorId() *mesos_v1.ExecutorID {
	if m != nil {
		return m.ExecutorId
	}
	return nil
}

func (m *Call_Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Requests a specific set of resources from Mesos's allocator. If
// the allocator has support for this, corresponding offers will be
// sent asynchronously via the OFFERS event(s).
//
// NOTE: The built-in hierarchical allocator doesn't have support
// for this call and hence simply ignores it.
type Call_Request struct {
	Requests         []*mesos_v1.Request `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Call_Request) Reset()                    { *m = Call_Request{} }
func (m *Call_Request) String() string            { return proto.CompactTextString(m) }
func (*Call_Request) ProtoMessage()               {}
func (*Call_Request) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1, 11} }

func (m *Call_Request) GetRequests() []*mesos_v1.Request {
	if m != nil {
		return m.Requests
	}
	return nil
}

// Suppress offers for a specified role. If role is unset, the
// `SUPPRESS` call will suppress offers for all of the roles the
// framework is subscribed to.
type Call_Suppress struct {
	Role             *string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Call_Suppress) Reset()                    { *m = Call_Suppress{} }
func (m *Call_Suppress) String() string            { return proto.CompactTextString(m) }
func (*Call_Suppress) ProtoMessage()               {}
func (*Call_Suppress) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1, 12} }

func (m *Call_Suppress) GetRole() string {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "mesos.v1.scheduler.Event")
	proto.RegisterType((*Event_Subscribed)(nil), "mesos.v1.scheduler.Event.Subscribed")
	proto.RegisterType((*Event_Offers)(nil), "mesos.v1.scheduler.Event.Offers")
	proto.RegisterType((*Event_InverseOffers)(nil), "mesos.v1.scheduler.Event.InverseOffers")
	proto.RegisterType((*Event_Rescind)(nil), "mesos.v1.scheduler.Event.Rescind")
	proto.RegisterType((*Event_RescindInverseOffer)(nil), "mesos.v1.scheduler.Event.RescindInverseOffer")
	proto.RegisterType((*Event_Update)(nil), "mesos.v1.scheduler.Event.Update")
	proto.RegisterType((*Event_Message)(nil), "mesos.v1.scheduler.Event.Message")
	proto.RegisterType((*Event_Failure)(nil), "mesos.v1.scheduler.Event.Failure")
	proto.RegisterType((*Event_Error)(nil), "mesos.v1.scheduler.Event.Error")
	proto.RegisterType((*Call)(nil), "mesos.v1.scheduler.Call")
	proto.RegisterType((*Call_Subscribe)(nil), "mesos.v1.scheduler.Call.Subscribe")
	proto.RegisterType((*Call_Accept)(nil), "mesos.v1.scheduler.Call.Accept")
	proto.RegisterType((*Call_Decline)(nil), "mesos.v1.scheduler.Call.Decline")
	proto.RegisterType((*Call_AcceptInverseOffers)(nil), "mesos.v1.scheduler.Call.AcceptInverseOffers")
	proto.RegisterType((*Call_DeclineInverseOffers)(nil), "mesos.v1.scheduler.Call.DeclineInverseOffers")
	proto.RegisterType((*Call_Revive)(nil), "mesos.v1.scheduler.Call.Revive")
	proto.RegisterType((*Call_Kill)(nil), "mesos.v1.scheduler.Call.Kill")
	proto.RegisterType((*Call_Shutdown)(nil), "mesos.v1.scheduler.Call.Shutdown")
	proto.RegisterType((*Call_Acknowledge)(nil), "mesos.v1.scheduler.Call.Acknowledge")
	proto.RegisterType((*Call_Reconcile)(nil), "mesos.v1.scheduler.Call.Reconcile")
	proto.RegisterType((*Call_Reconcile_Task)(nil), "mesos.v1.scheduler.Call.Reconcile.Task")
	proto.RegisterType((*Call_Message)(nil), "mesos.v1.scheduler.Call.Message")
	proto.RegisterType((*Call_Request)(nil), "mesos.v1.scheduler.Call.Request")
	proto.RegisterType((*Call_Suppress)(nil), "mesos.v1.scheduler.Call.Suppress")
	proto.RegisterEnum("mesos.v1.scheduler.Event_Type", Event_Type_name, Event_Type_value)
	proto.RegisterEnum("mesos.v1.scheduler.Call_Type", Call_Type_name, Call_Type_value)
}

func init() { proto.RegisterFile("v1/scheduler/scheduler.proto", fileDescriptorScheduler) }

var fileDescriptorScheduler = []byte{
	// 1448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0xff, 0x53, 0x96, 0x44, 0x69, 0x64, 0xc9, 0xcc, 0xfa, 0xe3, 0xcf, 0x10, 0xf9, 0x70, 0x8c,
	0x00, 0x76, 0xd1, 0x44, 0x81, 0x0d, 0xa4, 0x49, 0x93, 0xba, 0xa8, 0x2c, 0x51, 0x09, 0x61, 0x47,
	0x76, 0x97, 0x52, 0x7a, 0x54, 0x19, 0x72, 0x65, 0x13, 0xa6, 0x45, 0x95, 0xa4, 0x94, 0xa6, 0xb7,
	0xe6, 0xd0, 0x47, 0xe8, 0xb9, 0xf7, 0x3c, 0x42, 0xdf, 0xa5, 0x4f, 0xd0, 0x37, 0xe8, 0xa5, 0xd8,
	0xe5, 0x92, 0xa2, 0x64, 0xca, 0xb4, 0x0f, 0x2d, 0x7a, 0x5b, 0x72, 0x7e, 0xbf, 0x99, 0xe1, 0xec,
	0x7c, 0x11, 0xee, 0x4c, 0x76, 0x9f, 0xf8, 0xe6, 0x19, 0xb1, 0xc6, 0x0e, 0xf1, 0xa6, 0xa7, 0xfa,
	0xc8, 0x73, 0x03, 0x17, 0xa1, 0x0b, 0xe2, 0xbb, 0x7e, 0x7d, 0xb2, 0x5b, 0x8f, 0x25, 0xca, 0x1a,
	0x7b, 0xf7, 0x64, 0xb2, 0xfb, 0x24, 0x14, 0x32, 0xe4, 0xd6, 0x5f, 0xcb, 0x50, 0x50, 0x27, 0x64,
	0x18, 0xa0, 0x3d, 0xc8, 0x07, 0x1f, 0x46, 0x44, 0x16, 0x36, 0x85, 0x9d, 0xda, 0xde, 0xbd, 0xfa,
	0x65, 0x15, 0x75, 0x06, 0xac, 0x77, 0x3f, 0x8c, 0x08, 0x66, 0x58, 0xd4, 0x02, 0xf0, 0xc7, 0xef,
	0x7c, 0xd3, 0xb3, 0xdf, 0x11, 0x4b, 0xce, 0x6d, 0x0a, 0x3b, 0x95, 0xbd, 0x87, 0x8b, 0x99, 0x7a,
	0x8c, 0xc5, 0x09, 0x1e, 0x7a, 0x0e, 0x45, 0x77, 0x30, 0x20, 0x9e, 0x2f, 0x2f, 0x31, 0x0d, 0x9b,
	0x8b, 0x35, 0x1c, 0x33, 0x1c, 0xe6, 0x78, 0xd4, 0x81, 0x9a, 0x3d, 0x9c, 0x10, 0xcf, 0x27, 0x7d,
	0xae, 0xa1, 0xcc, 0x34, 0x6c, 0x2f, 0xd6, 0xa0, 0x85, 0x78, 0xae, 0xa8, 0x6a, 0x27, 0x1f, 0xd1,
	0x4b, 0x10, 0x3d, 0xe2, 0x9b, 0xf6, 0xd0, 0x92, 0xf3, 0x4c, 0xd1, 0x83, 0xc5, 0x8a, 0x70, 0x08,
	0xc4, 0x11, 0x03, 0x19, 0xb0, 0xce, 0x8f, 0xfd, 0x19, 0xa7, 0x64, 0x60, 0xaa, 0x1e, 0x67, 0xaa,
	0x4a, 0xba, 0x86, 0x57, 0xbd, 0xcb, 0x2f, 0x69, 0xa4, 0xc6, 0x23, 0xcb, 0x08, 0x88, 0x5c, 0xc8,
	0x8a, 0x54, 0x8f, 0xe1, 0x30, 0xc7, 0xd3, 0x2f, 0xbb, 0x20, 0xbe, 0x6f, 0x9c, 0x12, 0xb9, 0x98,
	0xf5, 0x65, 0x6f, 0x42, 0x20, 0x8e, 0x18, 0x94, 0x3c, 0x30, 0x6c, 0x67, 0xec, 0x11, 0x59, 0xcc,
	0x22, 0xb7, 0x43, 0x20, 0x8e, 0x18, 0xe8, 0x29, 0x14, 0x88, 0xe7, 0xb9, 0x9e, 0x5c, 0x62, 0xd4,
	0xfb, 0x8b, 0xa9, 0x2a, 0x85, 0xe1, 0x10, 0xad, 0xfc, 0x2e, 0x00, 0xe8, 0xc9, 0x1c, 0x59, 0x1e,
	0x78, 0xc6, 0x05, 0x79, 0xef, 0x7a, 0xe7, 0x7d, 0xdb, 0x92, 0x85, 0xcd, 0xdc, 0x4e, 0x65, 0x6f,
	0x7d, 0xaa, 0xac, 0x1d, 0x49, 0xb5, 0x16, 0xae, 0xc4, 0x50, 0xcd, 0x42, 0x5f, 0x81, 0x72, 0x46,
	0x0c, 0x2f, 0x78, 0x47, 0x8c, 0xa0, 0x6f, 0x0f, 0x03, 0xe2, 0x4d, 0x0c, 0xa7, 0xef, 0x13, 0xd3,
	0x1d, 0x5a, 0x3e, 0xcb, 0x59, 0x01, 0xcb, 0x31, 0x42, 0xe3, 0x00, 0x3d, 0x94, 0xa3, 0xa7, 0x50,
	0xb9, 0x30, 0xfc, 0x80, 0x78, 0x7d, 0x7b, 0x38, 0x70, 0x79, 0x82, 0xae, 0x4d, 0xcd, 0xbe, 0x61,
	0x42, 0x6d, 0x38, 0x70, 0x31, 0x5c, 0xc4, 0x67, 0x65, 0x17, 0x8a, 0x3c, 0xa5, 0xb6, 0xe3, 0xe4,
	0x16, 0x36, 0x97, 0x76, 0x2a, 0x7b, 0x2b, 0x53, 0x6e, 0x78, 0xd1, 0x5c, 0xac, 0x74, 0xa0, 0x3a,
	0x93, 0x9b, 0x68, 0xff, 0x52, 0x72, 0x87, 0x1a, 0x36, 0xa6, 0x1a, 0x66, 0x32, 0x66, 0x36, 0x97,
	0x95, 0x67, 0x20, 0xf2, 0xbc, 0x42, 0x8f, 0xa0, 0xc4, 0x34, 0x4c, 0x03, 0x77, 0x6b, 0xce, 0x0b,
	0xad, 0x85, 0x45, 0x06, 0xd1, 0x2c, 0x05, 0xc3, 0x6a, 0x4a, 0x42, 0xa2, 0x97, 0x20, 0xcd, 0xb8,
	0x73, 0xa5, 0xb2, 0x5a, 0xd2, 0x17, 0xcd, 0x52, 0xbe, 0x80, 0x62, 0x98, 0x90, 0xe8, 0x11, 0x14,
	0xfd, 0xc0, 0x08, 0xc6, 0x3e, 0x27, 0x27, 0x62, 0xd9, 0x35, 0xfc, 0x73, 0x9d, 0xc9, 0x30, 0xc7,
	0x28, 0x1f, 0x05, 0x10, 0x79, 0x3a, 0xd2, 0xaf, 0x30, 0x4e, 0xc9, 0x30, 0x48, 0x35, 0xdc, 0xa0,
	0x12, 0xfa, 0x15, 0x0c, 0xa2, 0x59, 0xf4, 0xe2, 0xc8, 0x8f, 0xc4, 0x1c, 0x07, 0x2e, 0xf3, 0x34,
	0x37, 0x6f, 0x4c, 0xe5, 0x42, 0xad, 0x85, 0x21, 0x02, 0x6a, 0x16, 0x42, 0x90, 0xb7, 0x8c, 0xc0,
	0x90, 0x97, 0x36, 0x73, 0x3b, 0xcb, 0x98, 0x9d, 0x95, 0x5f, 0x04, 0x10, 0x79, 0x5a, 0xcf, 0x39,
	0x21, 0xdc, 0xd4, 0x09, 0xe1, 0x5a, 0x4e, 0x6c, 0xc4, 0x31, 0xa2, 0xf9, 0x56, 0x88, 0xa3, 0xf1,
	0x00, 0x0a, 0xac, 0x46, 0x90, 0x3c, 0xad, 0x66, 0x1a, 0x89, 0x72, 0x5c, 0xaa, 0x5b, 0x9f, 0x04,
	0xc8, 0xd3, 0x06, 0x8d, 0x2a, 0x20, 0xf6, 0x3a, 0x87, 0x9d, 0xe3, 0xef, 0x3a, 0xd2, 0xff, 0x50,
	0x0d, 0x40, 0xef, 0x1d, 0xe8, 0x4d, 0xac, 0x1d, 0xa8, 0x2d, 0x49, 0x40, 0x00, 0xc5, 0xe3, 0x76,
	0x5b, 0xc5, 0xba, 0x94, 0x43, 0x08, 0x6a, 0x5a, 0xe7, 0xad, 0x8a, 0x75, 0xb5, 0xcf, 0xdf, 0x95,
	0x29, 0x19, 0xab, 0x7a, 0x53, 0xeb, 0xb4, 0xa4, 0x25, 0x74, 0x1b, 0xd6, 0xf9, 0x43, 0x7f, 0x06,
	0x28, 0x01, 0xd5, 0xd3, 0x3b, 0x69, 0x35, 0xba, 0xaa, 0x94, 0xa7, 0x9c, 0x37, 0xaa, 0xae, 0x37,
	0x5e, 0xa9, 0x52, 0x81, 0x3e, 0xb4, 0x1b, 0xda, 0x51, 0x0f, 0xab, 0x52, 0x11, 0x95, 0xa1, 0xa0,
	0x62, 0x7c, 0x8c, 0x25, 0x11, 0x55, 0xa1, 0xfc, 0x5a, 0x6d, 0xe0, 0xee, 0x81, 0xda, 0xe8, 0x4a,
	0xa5, 0xad, 0x3f, 0xd6, 0x20, 0xdf, 0x34, 0x1c, 0x27, 0xa5, 0xbc, 0x85, 0x6b, 0x96, 0xf7, 0x2e,
	0x1f, 0x5b, 0x39, 0x36, 0xb6, 0xee, 0xa6, 0x75, 0x17, 0x6a, 0x21, 0x39, 0xb5, 0xbe, 0x81, 0x72,
	0x3c, 0x7d, 0x78, 0x45, 0x6f, 0x2d, 0xe4, 0xc5, 0x3d, 0x08, 0x4f, 0x49, 0xe8, 0x19, 0x14, 0x0d,
	0xd3, 0x24, 0xa3, 0x80, 0x8f, 0x89, 0xfb, 0x0b, 0xe9, 0x0d, 0x06, 0xc3, 0x1c, 0x8e, 0x5e, 0x80,
	0x68, 0x11, 0xd3, 0xb1, 0x87, 0x57, 0x76, 0x70, 0xc6, 0x6c, 0x85, 0x38, 0x1c, 0x11, 0xd0, 0xf7,
	0xb0, 0x1e, 0x6a, 0xe9, 0xcf, 0xb5, 0x85, 0x2a, 0xd3, 0xf4, 0x28, 0xc3, 0x87, 0xd9, 0xc1, 0xb7,
	0x6a, 0x5c, 0x7e, 0x89, 0x4c, 0xd8, 0xe0, 0xc6, 0xe6, 0x4d, 0xd4, 0x16, 0x8f, 0xb0, 0xa4, 0xb3,
	0xb3, 0x36, 0xd6, 0xac, 0x94, 0xb7, 0x34, 0x76, 0x1e, 0x99, 0xd8, 0x13, 0x22, 0xaf, 0x64, 0xc4,
	0x0e, 0x33, 0x18, 0xe6, 0x70, 0x7a, 0xd3, 0xe7, 0xb6, 0xe3, 0xf0, 0xf9, 0xb5, 0xf8, 0xa6, 0x0f,
	0x6d, 0xc7, 0xc1, 0x0c, 0x8a, 0xf6, 0xa1, 0xe4, 0x9f, 0x8d, 0x03, 0xcb, 0x7d, 0x3f, 0xbc, 0x6a,
	0x72, 0x85, 0x17, 0xcd, 0x81, 0x38, 0xa6, 0xa0, 0x36, 0x54, 0x0c, 0xf3, 0x7c, 0xe8, 0xbe, 0x77,
	0x88, 0x75, 0x4a, 0xf8, 0x00, 0x7b, 0x78, 0x45, 0x9c, 0x63, 0x2c, 0x4e, 0x12, 0x69, 0xc2, 0x79,
	0x74, 0x9e, 0x98, 0xb6, 0x43, 0xf8, 0x86, 0xb2, 0x75, 0xc5, 0x57, 0x73, 0x24, 0x9e, 0x92, 0x68,
	0xde, 0x44, 0x05, 0x0f, 0x19, 0x79, 0x73, 0x69, 0x7a, 0xbf, 0xa0, 0x4b, 0xcd, 0x0f, 0x63, 0xe2,
	0x07, 0x72, 0x25, 0x83, 0x8b, 0x43, 0x1c, 0x8e, 0x08, 0x2c, 0x80, 0xe3, 0xd1, 0xc8, 0x23, 0xbe,
	0x2f, 0x4b, 0x59, 0x01, 0xe4, 0x40, 0x1c, 0x53, 0x94, 0x43, 0x28, 0xc7, 0xf5, 0x83, 0xbe, 0x86,
	0x5a, 0xa2, 0xc6, 0xe9, 0x34, 0x0d, 0xbb, 0xf8, 0xff, 0xd3, 0xaa, 0x9c, 0x0e, 0xd4, 0xea, 0x20,
	0xf9, 0xa8, 0xfc, 0x26, 0x40, 0x31, 0x4c, 0x65, 0x54, 0x87, 0x72, 0x34, 0x83, 0xa2, 0xa9, 0x98,
	0x32, 0x84, 0x4a, 0x7c, 0xa2, 0xf9, 0xe8, 0x4b, 0x00, 0x77, 0x44, 0x3c, 0x23, 0xb0, 0xdd, 0x21,
	0x9d, 0xf9, 0x94, 0x70, 0x7b, 0x8e, 0x50, 0x3f, 0x8e, 0x10, 0x38, 0x01, 0x46, 0x9f, 0x83, 0x38,
	0xb0, 0x9d, 0x60, 0xba, 0x9d, 0x26, 0x0c, 0xb5, 0x43, 0x01, 0x8e, 0x10, 0xca, 0x00, 0x44, 0x5e,
	0x09, 0x37, 0x76, 0x31, 0x61, 0x27, 0x97, 0x69, 0xe7, 0x67, 0x01, 0x56, 0x53, 0xaa, 0x1a, 0xed,
	0xc3, 0xad, 0xf9, 0x19, 0x7d, 0x85, 0xf1, 0x95, 0xd9, 0x21, 0x7d, 0x43, 0x1f, 0x3e, 0x0a, 0xb0,
	0x96, 0x56, 0xf6, 0xff, 0xaa, 0x13, 0x77, 0xa0, 0x18, 0x76, 0x09, 0x3a, 0xb8, 0x3d, 0xd7, 0x09,
	0x7f, 0x5f, 0xca, 0x98, 0x9d, 0x95, 0x5f, 0x05, 0xc8, 0xd3, 0x6e, 0x80, 0x3e, 0x03, 0x31, 0x30,
	0xfc, 0xc4, 0xe2, 0x28, 0xcd, 0x6e, 0x1d, 0x5a, 0x0b, 0x17, 0x29, 0x40, 0xb3, 0x66, 0x06, 0x7c,
	0xee, 0x3a, 0x03, 0x9e, 0x36, 0x9a, 0xfe, 0xc8, 0x75, 0x6c, 0xf3, 0xc3, 0xe5, 0xf5, 0x90, 0x5a,
	0x3f, 0x61, 0x32, 0x0c, 0xe7, 0xf1, 0x59, 0x71, 0xa1, 0x14, 0xb5, 0x9b, 0xf9, 0x1d, 0x41, 0xb8,
	0xe6, 0xa2, 0x32, 0xeb, 0x67, 0xc6, 0x36, 0xa4, 0xfc, 0x04, 0x95, 0x44, 0x77, 0xba, 0xe1, 0x2a,
	0x95, 0x88, 0x5e, 0x2e, 0x23, 0x7a, 0x08, 0xf2, 0xe3, 0xb1, 0x6d, 0x45, 0xeb, 0x13, 0x3d, 0x2b,
	0x9f, 0x04, 0x28, 0xc7, 0x4d, 0x0d, 0xed, 0x43, 0x81, 0x62, 0xa3, 0x8c, 0xd8, 0xce, 0xee, 0x83,
	0xcc, 0x06, 0x0e, 0x59, 0x4a, 0x1f, 0xf2, 0xf4, 0xf1, 0x1f, 0xbb, 0xd1, 0xff, 0xc6, 0xc6, 0xf9,
	0x9c, 0xee, 0xee, 0x61, 0x07, 0x7e, 0x0c, 0x25, 0xde, 0x8c, 0x53, 0x8a, 0x28, 0xea, 0xd7, 0x31,
	0x44, 0xb9, 0x07, 0xa5, 0xa8, 0x0f, 0xa7, 0x95, 0xc4, 0xd6, 0x9f, 0xa9, 0xfb, 0x61, 0x15, 0xca,
	0xf1, 0x7e, 0x28, 0x09, 0x68, 0x19, 0x4a, 0x5d, 0xb5, 0x81, 0x5b, 0x54, 0x98, 0xa3, 0x4b, 0x5e,
	0xa3, 0xd9, 0x54, 0x4f, 0xba, 0xd2, 0x12, 0x65, 0xb5, 0xd4, 0xe6, 0x91, 0xd6, 0xa1, 0x1b, 0xdf,
	0x6d, 0x58, 0x0f, 0x05, 0xfd, 0xb9, 0x05, 0xb2, 0x8a, 0x14, 0xd8, 0xe0, 0xb8, 0x79, 0x59, 0x8d,
	0xea, 0xc3, 0xea, 0x5b, 0xed, 0x2d, 0xdd, 0x13, 0x4b, 0x90, 0x3f, 0xd4, 0x8e, 0x8e, 0xa4, 0x22,
	0xb5, 0xa9, 0xbf, 0xee, 0x75, 0x99, 0x4d, 0x11, 0xad, 0x40, 0xa5, 0xd1, 0xa4, 0xde, 0x1d, 0xa9,
	0xad, 0x57, 0xaa, 0x54, 0xa2, 0x1e, 0x62, 0xb5, 0x79, 0xdc, 0x69, 0x6a, 0x47, 0x6a, 0xb8, 0xa0,
	0x46, 0xcb, 0x26, 0x84, 0xdb, 0xea, 0xb7, 0x3d, 0x55, 0xef, 0x4a, 0x15, 0xa6, 0xa7, 0x77, 0x72,
	0x82, 0x55, 0x5d, 0x97, 0x96, 0x0f, 0xb6, 0xe1, 0xae, 0xeb, 0x9d, 0xd6, 0x8d, 0x91, 0x61, 0x9e,
	0x91, 0x94, 0x54, 0x3b, 0x28, 0x9e, 0x78, 0x6e, 0xe0, 0xfa, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xd4, 0x73, 0xea, 0x5b, 0x50, 0x11, 0x00, 0x00,
}
